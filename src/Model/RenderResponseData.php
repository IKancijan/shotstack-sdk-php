<?php
/**
 * RenderResponseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Shotstack
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Shotstack\Model;

use \ArrayAccess;
/**
 * RenderResponseData Class Doc Comment
 *
 * @category    Class
 * @description Model for RenderResponseData
 * @package     Shotstack
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RenderResponseData implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'created' => 'string',
        'data' => '\Shotstack\Model\Edit',
        'id' => 'string',
        'owner' => 'string',
        'status' => 'string',
        'updated' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'created' => 'created',
        'data' => 'data',
        'id' => 'id',
        'owner' => 'owner',
        'status' => 'status',
        'updated' => 'updated'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'created' => 'setCreated',
        'data' => 'setData',
        'id' => 'setId',
        'owner' => 'setOwner',
        'status' => 'setStatus',
        'updated' => 'setUpdated'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'created' => 'getCreated',
        'data' => 'getData',
        'id' => 'getId',
        'owner' => 'getOwner',
        'status' => 'getStatus',
        'updated' => 'getUpdated'
    );
  
    
    /**
      * $created 
      * @var string
      */
    protected $created;
    
    /**
      * $data 
      * @var \Shotstack\Model\Edit
      */
    protected $data;
    
    /**
      * $id 
      * @var string
      */
    protected $id;
    
    /**
      * $owner 
      * @var string
      */
    protected $owner;
    
    /**
      * $status 
      * @var string
      */
    protected $status;
    
    /**
      * $updated 
      * @var string
      */
    protected $updated;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->created = $data["created"];
            $this->data = $data["data"];
            $this->id = $data["id"];
            $this->owner = $data["owner"];
            $this->status = $data["status"];
            $this->updated = $data["updated"];
        }
    }
    
    /**
     * Gets created
     * @return string
     */
    public function getCreated()
    {
        return $this->created;
    }
  
    /**
     * Sets created
     * @param string $created 
     * @return $this
     */
    public function setCreated($created)
    {
        
        $this->created = $created;
        return $this;
    }
    
    /**
     * Gets data
     * @return \Shotstack\Model\Edit
     */
    public function getData()
    {
        return $this->data;
    }
  
    /**
     * Sets data
     * @param \Shotstack\Model\Edit $data 
     * @return $this
     */
    public function setData($data)
    {
        
        $this->data = $data;
        return $this;
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets owner
     * @return string
     */
    public function getOwner()
    {
        return $this->owner;
    }
  
    /**
     * Sets owner
     * @param string $owner 
     * @return $this
     */
    public function setOwner($owner)
    {
        
        $this->owner = $owner;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status 
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array("queued", "fetching", "rendering", "saving", "done", "failed");
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'queued', 'fetching', 'rendering', 'saving', 'done', 'failed'");
        }
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets updated
     * @return string
     */
    public function getUpdated()
    {
        return $this->updated;
    }
  
    /**
     * Sets updated
     * @param string $updated 
     * @return $this
     */
    public function setUpdated($updated)
    {
        
        $this->updated = $updated;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Shotstack\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Shotstack\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}

<?php
/**
 * Clip
 *
 * PHP version 5
 *
 * @category Class
 * @package  Shotstack\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shotstack
 *
 * The Shotstack API is a video editing service that allows for the automated creation of videos using JSON. You can configure an edit and POST it to the Shotstack API which will render your video and provide a file location when complete. For more details check https://shotstack.io
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Shotstack\Client\Model;

use \ArrayAccess;
use \Shotstack\Client\ObjectSerializer;

/**
 * Clip Class Doc Comment
 *
 * @category Class
 * @description A clip is a container for a specific type of asset, i.e. a title, image, video, audio or html. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions, filters and effects to apply to it.
 * @package  Shotstack\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Clip implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Clip';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'asset' => '\Shotstack\Client\Model\Asset',
        'start' => 'float',
        'length' => 'float',
        'fit' => 'string',
        'scale' => 'float',
        'position' => 'string',
        'offset' => '\Shotstack\Client\Model\Offset',
        'transition' => '\Shotstack\Client\Model\Transition',
        'effect' => 'string',
        'filter' => 'string',
        'opacity' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'asset' => null,
        'start' => null,
        'length' => null,
        'fit' => null,
        'scale' => null,
        'position' => null,
        'offset' => null,
        'transition' => null,
        'effect' => null,
        'filter' => null,
        'opacity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset' => 'asset',
        'start' => 'start',
        'length' => 'length',
        'fit' => 'fit',
        'scale' => 'scale',
        'position' => 'position',
        'offset' => 'offset',
        'transition' => 'transition',
        'effect' => 'effect',
        'filter' => 'filter',
        'opacity' => 'opacity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset' => 'setAsset',
        'start' => 'setStart',
        'length' => 'setLength',
        'fit' => 'setFit',
        'scale' => 'setScale',
        'position' => 'setPosition',
        'offset' => 'setOffset',
        'transition' => 'setTransition',
        'effect' => 'setEffect',
        'filter' => 'setFilter',
        'opacity' => 'setOpacity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset' => 'getAsset',
        'start' => 'getStart',
        'length' => 'getLength',
        'fit' => 'getFit',
        'scale' => 'getScale',
        'position' => 'getPosition',
        'offset' => 'getOffset',
        'transition' => 'getTransition',
        'effect' => 'getEffect',
        'filter' => 'getFilter',
        'opacity' => 'getOpacity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FIT_COVER = 'cover';
    const FIT_CONTAIN = 'contain';
    const FIT_CROP = 'crop';
    const FIT_NONE = 'none';
    const POSITION_TOP = 'top';
    const POSITION_TOP_RIGHT = 'topRight';
    const POSITION_RIGHT = 'right';
    const POSITION_BOTTOM_RIGHT = 'bottomRight';
    const POSITION_BOTTOM = 'bottom';
    const POSITION_BOTTOM_LEFT = 'bottomLeft';
    const POSITION_LEFT = 'left';
    const POSITION_TOP_LEFT = 'topLeft';
    const POSITION_CENTER = 'center';
    const EFFECT_ZOOM_IN = 'zoomIn';
    const EFFECT_ZOOM_OUT = 'zoomOut';
    const EFFECT_SLIDE_LEFT = 'slideLeft';
    const EFFECT_SLIDE_RIGHT = 'slideRight';
    const EFFECT_SLIDE_UP = 'slideUp';
    const EFFECT_SLIDE_DOWN = 'slideDown';
    const FILTER_BOOST = 'boost';
    const FILTER_CONTRAST = 'contrast';
    const FILTER_DARKEN = 'darken';
    const FILTER_GREYSCALE = 'greyscale';
    const FILTER_LIGHTEN = 'lighten';
    const FILTER_MUTED = 'muted';
    const FILTER_NEGATIVE = 'negative';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFitAllowableValues()
    {
        return [
            self::FIT_COVER,
            self::FIT_CONTAIN,
            self::FIT_CROP,
            self::FIT_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPositionAllowableValues()
    {
        return [
            self::POSITION_TOP,
            self::POSITION_TOP_RIGHT,
            self::POSITION_RIGHT,
            self::POSITION_BOTTOM_RIGHT,
            self::POSITION_BOTTOM,
            self::POSITION_BOTTOM_LEFT,
            self::POSITION_LEFT,
            self::POSITION_TOP_LEFT,
            self::POSITION_CENTER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEffectAllowableValues()
    {
        return [
            self::EFFECT_ZOOM_IN,
            self::EFFECT_ZOOM_OUT,
            self::EFFECT_SLIDE_LEFT,
            self::EFFECT_SLIDE_RIGHT,
            self::EFFECT_SLIDE_UP,
            self::EFFECT_SLIDE_DOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilterAllowableValues()
    {
        return [
            self::FILTER_BOOST,
            self::FILTER_CONTRAST,
            self::FILTER_DARKEN,
            self::FILTER_GREYSCALE,
            self::FILTER_LIGHTEN,
            self::FILTER_MUTED,
            self::FILTER_NEGATIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asset'] = isset($data['asset']) ? $data['asset'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['fit'] = isset($data['fit']) ? $data['fit'] : 'crop';
        $this->container['scale'] = isset($data['scale']) ? $data['scale'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : 'center';
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
        $this->container['transition'] = isset($data['transition']) ? $data['transition'] : null;
        $this->container['effect'] = isset($data['effect']) ? $data['effect'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['opacity'] = isset($data['opacity']) ? $data['opacity'] : 1;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['length'] === null) {
            $invalidProperties[] = "'length' can't be null";
        }
        $allowedValues = $this->getFitAllowableValues();
        if (!is_null($this->container['fit']) && !in_array($this->container['fit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPositionAllowableValues();
        if (!is_null($this->container['position']) && !in_array($this->container['position'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'position', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEffectAllowableValues();
        if (!is_null($this->container['effect']) && !in_array($this->container['effect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'effect', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilterAllowableValues();
        if (!is_null($this->container['filter']) && !in_array($this->container['filter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filter', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset
     *
     * @return Asset
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param Asset $asset The type of asset to display for the duration of this Clip. Value must be one of <b>TitleAsset</b>, <b>ImageAsset</b> or <b>VideoAsset</b>.
     *
     * @return $this
     */
    public function setAsset($asset)
    {
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets start
     *
     * @return float
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param float $start The start position of the Clip on the timeline, in seconds.
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float $length The length, in seconds, the Clip should play for.
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets fit
     *
     * @return string|null
     */
    public function getFit()
    {
        return $this->container['fit'];
    }

    /**
     * Sets fit
     *
     * @param string|null $fit Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`crop` - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>
     *
     * @return $this
     */
    public function setFit($fit)
    {
        $allowedValues = $this->getFitAllowableValues();
        if (!is_null($fit) && !in_array($fit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fit'] = $fit;

        return $this;
    }

    /**
     * Gets scale
     *
     * @return float|null
     */
    public function getScale()
    {
        return $this->container['scale'];
    }

    /**
     * Sets scale
     *
     * @param float|null $scale Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
     *
     * @return $this
     */
    public function setScale($scale)
    {
        $this->container['scale'] = $scale;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string|null $position Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $allowedValues = $this->getPositionAllowableValues();
        if (!is_null($position) && !in_array($position, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'position', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return \Shotstack\Client\Model\Offset|null
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param \Shotstack\Client\Model\Offset|null $offset offset
     *
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets transition
     *
     * @return \Shotstack\Client\Model\Transition|null
     */
    public function getTransition()
    {
        return $this->container['transition'];
    }

    /**
     * Sets transition
     *
     * @param \Shotstack\Client\Model\Transition|null $transition transition
     *
     * @return $this
     */
    public function setTransition($transition)
    {
        $this->container['transition'] = $transition;

        return $this;
    }

    /**
     * Gets effect
     *
     * @return string|null
     */
    public function getEffect()
    {
        return $this->container['effect'];
    }

    /**
     * Sets effect
     *
     * @param string|null $effect A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul>
     *
     * @return $this
     */
    public function setEffect($effect)
    {
        $allowedValues = $this->getEffectAllowableValues();
        if (!is_null($effect) && !in_array($effect, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'effect', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['effect'] = $effect;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return string|null
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param string|null $filter A filter effect to apply to the Clip. <ul>   <li>`blur` - blurs the image or video</li>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`invert` - invert colors</li> </ul>
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $allowedValues = $this->getFilterAllowableValues();
        if (!is_null($filter) && !in_array($filter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filter', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets opacity
     *
     * @return float|null
     */
    public function getOpacity()
    {
        return $this->container['opacity'];
    }

    /**
     * Sets opacity
     *
     * @param float|null $opacity Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
     *
     * @return $this
     */
    public function setOpacity($opacity)
    {
        $this->container['opacity'] = $opacity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


